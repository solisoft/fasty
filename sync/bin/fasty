#!/usr/bin/env node
/*jshint -W097, -W033, node: true, esversion: 6 */
"use strict"

var argv = require("yargs").argv
var colors = require("colors")
var request = require("request")
var _ = require("lodash")
var chokidar = require("chokidar")
const notifier = require("node-notifier")
var yaml = require("js-yaml")
var socket = null
const fs = require("fs")
const path = require('path')
const { exec, execSync, spawn } = require('child_process')
const { minify } = require("terser")
const { compile } = require("@riotjs/compiler")

var dirname = process.cwd()
var fullname = ""
var webhook = null
var domain = null
var sync = null
var updated_by_users = []
var tokens = {}
console.log("fasty@0.0.55")

function findFilesInDir(startPath,filter){

  var results = [];

  var files=fs.readdirSync(startPath);
  for(var i=0;i<files.length;i++){
      var filename=path.join(startPath,files[i]);
      var stat = fs.lstatSync(filename);
      if (stat.isDirectory()){
        results = results.concat(findFilesInDir(filename,filter)); //recurse
      }
      else if (filename.indexOf(filter)>=0) {
        results.push(filename);
      }
  }
  return results;
}

var check_json = function(json, folder, fullname, only) {
  _.each(json, function (v, k) {
    var pathname = "fs/" + folder + "/" + k
    if(!fs.existsSync(pathname)) fs.mkdirSync(pathname)
    _.each(v, function (obj) {
      var endpathname = pathname
      obj.name = _.first(_.compact([obj.name, obj.title, obj.slug]))
      if (obj.name) {
        if (obj.path) {
          var recursive_path = pathname
          _.each(obj.path, function(pa) {
            if(pa != "Root") {
              recursive_path += "/" + pa
              if(!fs.existsSync(recursive_path)) fs.mkdirSync(recursive_path)
            }
          })
          if (_.isObject(obj.name)) {
            _.each(obj.name, function (value, key) {
              _endpathname = recursive_path + "/" + value + "_" + key
              if(!fs.existsSync(_endpathname)) fs.mkdirSync(_endpathname)
            })
          } else {
            endpathname = recursive_path + "/" + obj.name
            if(!fs.existsSync(endpathname)) fs.mkdirSync(endpathname)
          }
        } else {
          if (_.isObject(obj.name)) {
            _.each(obj.name, function (value, key) {
              var _endpathname = pathname + "/" + value + "_" + key
              if(!fs.existsSync(_endpathname)) fs.mkdirSync(_endpathname)
            })
          } else {
            endpathname = pathname + "/" + obj.name
            if(!fs.existsSync(endpathname)) fs.mkdirSync(endpathname)
          }
        }
      }

      var header = obj.locked_by ? "@lock" : ""
      header += "#FASTY " + obj.id

      if (k == "layouts") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".html", header + " html\n" + obj.html)
        fs.writeFileSync(endpathname + "/" + obj.name + ".scss", header + " scss\n" + obj.scss)
        fs.writeFileSync(endpathname + "/" + obj.name + ".js", header + " javascript\n" + obj.js)
        fs.writeFileSync(endpathname + "/vendor.js", header + " i_js\n" + obj.i_js)
        fs.writeFileSync(endpathname + "/vendor.scss", header + " i_css\n" + obj.i_css)
      }
      if (k == "spas") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".html", header + " html\n" + obj.html)
        fs.writeFileSync(endpathname + "/" + obj.name + ".js", header + " js\n" + obj.js)
      }
      if (k == "pages") {
        _.each(obj.name, function (value, key) {
          var ext = ".html"
          var name = value

          if (value.split(".").length == 2) {
            ext = "." + value.split(".")[1]
            name = value.split(".")[0]
          }

          var data = obj.raw_html == null ? "" : obj.raw_html[key]

          fs.writeFileSync(endpathname + "/" + value + "_" + key + "/" + value + "_" + key + ext, header + " raw_html#" + key + "\n" + data)
        })
      }
      if (k == "components") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".html", header + " html\n" + obj.html)
      }
      if (k == "datatypes") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".json", header + " javascript\n" + obj.json)
      }
      if (k == "partials") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".html", header + " html\n" + obj.html)
      }
      if (k == "widgets") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".etlua", header + " partial\n" + obj.partial)
        fs.writeFileSync(endpathname + "/" + obj.name + ".json", header + " model\n" + obj.model)
      }
      if (k == "aqls") {
        fs.writeFileSync(endpathname + "/" + obj.name + ".aql", header + " aql\n" + obj.aql)
      }
      if (k == "apis") {
        header = "#FASTY " + obj.api.id
        endpathname = pathname + "/" + obj.api.name
        if(!fs.existsSync(endpathname)) fs.mkdirSync(endpathname)

        fs.writeFileSync(endpathname + "/manifest.json", header + " manifest\n" + obj.api.manifest)
        fs.writeFileSync(endpathname + "/main.js", header + " code\n" + obj.api.code)
        if(!fs.existsSync(endpathname + "/routes")) fs.mkdirSync(endpathname + "/routes")
        if(!fs.existsSync(endpathname + "/scripts")) fs.mkdirSync(endpathname + "/scripts")
        if(!fs.existsSync(endpathname + "/tests")) fs.mkdirSync(endpathname + "/tests")
        if(!fs.existsSync(endpathname + "/libs")) fs.mkdirSync(endpathname + "/libs")
        _.each(obj.api_routes, function (route) {
          header = "#FASTY " + route.id
          fs.writeFileSync(endpathname + "/routes/" + route.name + ".js", header + " javascript\n" + route.js)
        })
        _.each(obj.api_scripts, function (script) {
          header = "#FASTY " + script.id
          fs.writeFileSync(endpathname + "/scripts/" + script.name + ".js", header + " javascript\n" + script.js)
        })
        _.each(obj.api_tests, function (test) {
          header = "#FASTY " + test.id
          fs.writeFileSync(endpathname + "/tests/" + test.name + ".js", header + " javascript\n" + test.js)
        })
        _.each(obj.api_libs, function (lib) {
          header = "#FASTY " + lib.id
          fs.writeFileSync(endpathname + "/libs/" + lib.name + ".js", header + " javascript\n" + lib.js)
        })
      }
      if (k == "scripts") {
        fs.writeFileSync(endpathname + "/index.js", header + " code\n" + obj.code)
        fs.writeFileSync(endpathname + "/package.json", header + " package\n" + obj.package)
      }
      if (k == "datasets") {
        header = "#FASTY " + obj._id
        _.each(_.keys(obj), function (n) {
          if(!_.includes(["_key", "_id", "name", "title", "slug"], n)) {
            var type = ""
            if(_.includes(["js", "javascript"], n)) { type = "js" }
            if(n == "json") { type = "json" }
            if(n == "css") { type = "css" }
            if(n == "scss") { type = "scss" }
            if(n == "html") { type = "html" }
            if (type != "") {
              if (_.isObject(obj.name)) {
                _.each(obj.name, function (value, key) {
                  var _endpathname = endpathname + "/" + value + "_" + key
                  if (_.isObject(obj[n])) {
                    fs.writeFileSync(_endpathname + "/" + type + "_" + key + "." + type, header + " " + n + "#" + key + "\n" + obj[n][key])
                  } else {
                    fs.writeFileSync(_endpathname + "/" + type + "." + type, header + " " + n + "\n" + obj[n])
                  }
                })
              } else {
                if (_.isObject(obj[n])) {
                  _.each(obj[n], function (value, key) {
                    fs.writeFileSync(endpathname + "/" + type + "_" + key + "." + type, header + " " + n + "#" + key + "\n" + obj[n][key])
                  })
                } else {
                  fs.writeFileSync(endpathname + "/" + type + "." + type, header + " " + n + "\n" + obj[n])
                }
              }
            }
          }
        })
      }
    })
  })

  if (argv.w) {
    console.log("Watching folder.", dirname + "/fs/"+folder)
    chokidar.watch(dirname + "/fs/"+ folder, {ignored: /(^|[\/\\])\../}).on("all", (event, path) => {
      if(event == "add") {
        console.log(`Added : ${path}`.cyan)
      }
      if(event == "change") {
        console.log(`Modifying : ${path}`.magenta.italic)

        setTimeout(function() {
          fs.readFile(path, function(err, data) {
            if (data.length > 0) {
              var firstline = data.toString().split("\n")[0].trim()
              if(_.includes(updated_by_users, firstline)) {
                updated_by_users = _.difference(updated_by_users, [firstline])
              } else {
                var url = domain + "/sync/" + token
                var params = {
                  url: url,
                  body: JSON.stringify({
                    data: data.toString(),
                    name: fullname
                  })
                }
                request.patch(params, function optionalCallback(_err, _httpResponse, body) {
                  console.log(body.green)
                  if (body.indexOf("Saved! ") == 1) {
                    notifier.notify("Fasty :: " + body)

                    if (webhook) {
                      var payload = { "text": fullname + " :: " + dirname + body }
                      request.post({
                        headers : { "Content-type" : "application/json" },
                        url: webhook,
                        form : { payload: JSON.stringify(payload)}
                      }, function optionalCallback(_err, _httpResponse, body) { })
                    }

                    if (socket) {
                      var fileData = fs.readFileSync(path).toString()
                      var fileMeta = fileData.split("\n")[0].trim()
                      socket.emit("updated", { path: path.replace(dirname, ""), room: domain, from: fullname, fileData: fileData, fileMeta: fileMeta, secret: sync.secret })
                    }
                  }
                })
              }
            } else {
              console.log("something went wrong ... please try again".red)
            }
          })
        }, 100)
      }
    })
  }
}

var compile_riot_tag = (src, minify_content) => {
  const original_path = src
  src = src.replace(dirname, "").split("/").slice(1)
  const file_path = _.slice(src, 0, -1).join("/")
  var file_name = _.slice(_.last(src).split("."), 0, -1)
  const file_ext = _.last(_.last(src).split("."))

  const src_content = fs.readFileSync(original_path, "utf8")
  var t1 = +new Date()

  try {
    const { code, map } = compile(src_content, { format: "umd" })

    if(minify_content)
      minify(code).then(compiled_code => {
        var tag = compiled_code.code.replace(
          'export default',
          'var '+file_name+'='
        )
        var file = fs.openSync(file_path + "/" + file_name + ".js", "w+")
        fs.writeSync(file, tag)
        fs.closeSync(file)
        console.log("tag " + file_name + ".js compiled and minified in " +(+new Date() - t1) +"ms")
      })
    else {
      var tag = code.replace('export default', 'var '+file_name+'=')
      var file = fs.openSync(file_path + "/" + file_name + ".js", "w+")
      fs.writeSync(file, tag)
      fs.closeSync(file)
      console.log("tag " + file_name + ".js compiled in " +(+new Date() - t1) +"ms")
    }
  } catch(e) {
    notifier.notify({
      title: "Fasty :: Error",
      message: "Can't compile Riot component",
      sound: "Basso"
    })
  }
}

if(argv.compile) {
  if(argv._.length != 1) {
    console.log("usage: fasty <app> -compile").yellow
  } else {
    var folder = argv._[0]
    console.log(dirname + "/" +folder + "/app/components/")
    findFilesInDir(dirname + "/" + folder + "/app/components/", ".riot").forEach((f)=>{
      let yml = f.replace(".riot", ".yml")
      if(fs.existsSync(yml)) {
        console.log("YML file found for ", f)
        yml = yaml.safeLoad(fs.readFileSync(yml, "utf8"))
        if (yml.compiler == "riot5") {
          compile_riot_tag(f, false)
        }
      } else {
        console.log("no YML file found for ", f)
        compile_riot_tag(f, false)
      }

    })

    console.log("Searching for tailwind css files ...")

    let tw_files = findFilesInDir(folder , "_tw_src")
    console.log(tw_files)

    _.each(tw_files, (file) => {
      console.log(file)
      console.log(dirname + "/" + folder  + "/tailwind.config.js")
      execSync("tailwind -i " + file + " -o " + file.replace("_tw_src", "") + " --minify -c " + dirname + "/" + folder  + "/tailwind.config.js")
    })
  }
} else {
  if (argv._.length == 0 || argv.db) {

    console.log("Searching for tailwind css files ...")

    let tw_files = findFilesInDir(argv.tw || ".", "_tw_src")
    console.log(tw_files)
    _.each(tw_files, (file) => {
      const tw = spawn("tailwind", ["-i", file, "-o", file.replace("_tw_src", ""), "-w", "-c", file.split("/")[0] + "/tailwind.config.js"])

      tw.stderr.on('data', (data) => { if(data && data != "" && data.toString().indexOf("Rebuilding") < 0) console.error(file, data.toString().trim()) })

      tw.on('close', (code) => {
        console.log(`child process exited with code ${code}`)
      })
    })

    console.log("Watching folder.", dirname)
    chokidar.watch(dirname, { ignored: /(^|[\/\\])\../ }).on("all", (event, path) => {
      if (event == "change") {
        fs.writeFileSync(dirname + "/.lastupdate", (+new Date()) + "")
        //console.log("change : ", path)
        const original_path = path
        path = path.replace(dirname, "").split("/").slice(1)
        const file_path = _.slice(path, 0, -1).join("/")
        var file_name = _.slice(_.last(path).split("."), 0, -1)
        const file_ext = _.last(_.last(path).split("."))
        // <db_name>/app/<component>/<file_path>
        // if path is */app/components/** .riot
        // check if it needs to be compiled
        var watch_path = argv.tw || "."
        if(watch_path == "." || watch_path == path[0]) {
          if (path[2] == "components") {
            if(original_path.indexOf(".riot.html") > 0 || file_ext == "riot") {
              file_name = file_name[0]
              let yml = file_path + "/" + file_name[0] + ".yml"
              if(fs.existsSync(yml)) {
                yml = yaml.safeLoad(fs.readFileSync(yml, "utf8"))
                if (yml.compiler == "riot5") {
                  compile_riot_tag(original_path, false)
                }
              } else {
                compile_riot_tag(original_path, false)
              }
            }
          }

          var dbname = argv.db || path[0]

          if (path[2] == "apis" && path[4] != "package-lock.json") {
            execSync("cd " + path.slice(0, 4).join("/") + " && npm i")

            try {
              execSync("foxx show --database "+ dbname +" --server fasty /" + path[3])
              try {
                console.log("Upgrading API endpoint /" + path[3] + "...")
                execSync("foxx replace --database "+ dbname +" --server fasty /" + path[3] + " " + path.slice(0, 4).join("/"))
              } catch(e) {
                notifier.notify({
                  title: "Fasty :: Error",
                  message: "Can't install endpoint",
                  sound: "Basso"
                })
              }
            } catch(e) {
              try {
                console.log("Installing API endpoint /" + path[3] + "...")
                execSync("foxx install --database "+ dbname +" --server fasty /" + path[3] + " " + path.slice(0, 4).join("/"))
              } catch(e) {
                notifier.notify({
                  title: "Fasty :: Error",
                  message: "Can't install endpoint",
                  sound: "Basso"
                })
              }
            }

            console.log("Done")
            /*
            console.log("Running Tests")
            try {
              execSync("foxx test --database "+ dbname +" --server fasty /" + path[3])
            } catch(e) {
              notifier.notify({
                title: "Fasty :: Error",
                message: "Test on " + path[3],
                sound: "Basso"
              })
              console.log("Test failed")
            }
            const test = spawn("foxx", ["test", "--database", dbname, "--server", "fasty", "/"+path[3]])
            test.stdout.setEncoding('utf8');
            test.stdout.on('data', function(data) {
              console.log(data.toString().trim())
            })

            test.on('close', (code) => {})
            */
          }
        }

      }
    })
  } else {
    if(!fs.existsSync(dirname + "/.tokens.yml")) {
      console.log("Please configure a .tokens.yml file for tokens".red)
      process.exit()
    }

    tokens = yaml.safeLoad(fs.readFileSync(dirname + "/.tokens.yml", "utf8"))

    if(argv._.length != 1) {
      console.log("usage : fasty <shortuct> -w".yellow)
    } else {
      fullname = tokens["name"]
      domain = tokens["domains"][argv._[0]].domain
      webhook = tokens["domains"][argv._[0]].webhook
      var token  = tokens["domains"][argv._[0]].token
      sync   = tokens["domains"][argv._[0]].sync
      var folder = argv._[0]

      if (typeof (sync) == "string" && tokens["sync"]) {
        sync = tokens["sync"][sync]
      }

      if (sync && argv.w) {
        console.log("Launching realtime events ...".yellow)
        const io = require("socket.io-client")
        console.log(sync.server + ":" + sync.port)
        socket = io(sync.server + ":" + sync.port)

        socket.on("connect", () => {
          console.log("Socket Connected to " + sync.server + " on port " + sync.port) // true
          socket.emit("join", { secret: sync.secret, room: domain })
        });

        socket.on("updated", (data) => {
          var date = new Date()
          console.log(date.getHours() + ":" + date.getMinutes() + " Update event received : " + data.fileMeta)

          if (data.from != fullname) {

            var onlyPath = "." + require('path').dirname(data.path)
            if (!fs.existsSync(onlyPath)) fs.mkdirSync(onlyPath)

            console.log("File " + data.path + " updated by " + data.from)
            updated_by_users.push(data.fileMeta)
            fs.writeFileSync("." + data.path, data.fileData)
          }
        })
      }

      if(token === undefined) {
        console.log("Token not found for this domain".red)
        process.exit()
      }

      var url = domain + "/sync/" + token

      if(!fs.existsSync("fs")) fs.mkdirSync("fs")
      if(!fs.existsSync("fs/"+ folder)) fs.mkdirSync("fs/" + folder)

      if(argv.w) {
        console.log("Fetching data ...".green)
        request(url, function (_error, _response, body) {
          var data = JSON.parse(body)
          check_json(data, folder, fullname, domain)
        })
      }

      if (argv.c && argv.n) {
        request.post({
          url: url, form: JSON.stringify({ name: argv.n, type: argv.c })
        }, function (err, httpResponse, body) {
            console.log(body)
            console.log("Please resynchronize your folder!")
        })
      }
    }
  }
}
